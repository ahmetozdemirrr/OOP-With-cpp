#include <iostream>
#include <time.h>
#include <cstdlib>
#include <string>

using namespace std;

/*This function checks for the repetition of randomly generated numbers and returns a boolean value.*/

bool checkForRandom(int index, string str, int number)
{
	for (int i = 0; i < index; ++i)  
	{
		char ch = str[i];

		if ((int)ch == number)
		{
			return false;
		}			
	}
	return true;
}

/* This function returns a boolean value depending on whether the numbers from the command line 
or user input are repeated within itself.*/

bool checkForEnteredNumber(string comparator)
{
	for (int i = 0; i < comparator.size() - 1; ++i)
	{
		for (int j = i+1; j < comparator.size(); ++j)
		{
			if (comparator[i] == comparator[j])
			{
				return false;
			}
		}
	}
	return true;
}

/*This function returns a boolean value depending on whether the numbers from the command line 
or user input contain any characters other than digits.*/ 

bool checkForCharacter(string str)
{
	for (int i = 0; i < str.size() - 1; ++i)
	{
		if (str[i] < '0' || str[i] > '9')
		{
			return false;
		}
	}
	return true;
}

/*Function that compares the entered answers according to the secret number and gives the appropriate hint.*/
bool checkForAnswer(string strA, string strS, int count[])
{
	for (int i = 0; i < strA.size(); ++i)
	{
		for (int j = 0; j < strA.size(); ++j)
		{
			if (strA[i] == strS[j] && i == j)
			{
				count[0]++;
			}

			else if (strA[i] == strS[j] && i!= j)
			{
				count[1]++;
			}
		}
	}

	if (count[0] == strA.size()) //If all entered characters are the same, we return true to finish the program.
	{
		return true;
	}

	return false;
}

int main(int argc, char const *argv[])
{
	string string1 = "-r";
	string string2 = "-u";

    int count[2] = {0}; //For the answer check (first and second count)

	srand(time(NULL));

	if (argv[1] != string1 && argv[1] != string2) //Print an error code if there are invalid letters in the argv[1] argument read from the command line.(Other than u and r)
	{
		cerr << "E0" << endl;
		exit(1);
	}

	else if (argv[1] == string1 && (atoi(argv[2]) > 9 || atoi(argv[2]) < 1)) //If the number of digits from the command line is not appropriate, throw an error.
    {
    	cerr << "E0" << endl;
    	exit(1);
    }

	else
	{
		int numberDigit; //Number of digit of secretnumber
		int claim = 100; //Number of attempts by the user

		string enteredString; //The number entered by the user
		string secretNumber; //Number read from command line (-u) or generated by us (-r)

		if (argv[1] == string1) //-r
	    {
	    	int i = 1;

	    	numberDigit = atoi(argv[2]);
	    	secretNumber.resize(numberDigit);

			secretNumber[0] = 49 + rand() % 9; //Special case of first digit not being 0

	    	while (i < numberDigit)
	    	{
	    		int x = 48 + rand() % 10; // Creating randomly number include [0-9] range.
	    		
	    		if (checkForRandom(i,secretNumber,x)) //If there is the same digit in the number, a random digit is created again so that it does not repeat.
	    		{
	    			secretNumber[i] = x;
	    			i++;
	    		}
	    	}
	    }	
	    //cout << secretNumber << endl;

		if (argv[1] == string2) //-u
		{
			secretNumber = argv[2]; //gelen argümanı stringe atıyoruz

			if ((checkForEnteredNumber(secretNumber)) || checkForCharacter(secretNumber)) //If there is a number repetition or a character, we give an error.
			{
				cerr << "E0" << endl;
				exit(1);
			}
		}

		do
		{
			cin >> enteredString;
			claim--;
			
			if (!checkForEnteredNumber(enteredString) || (enteredString.size() < 1 || enteredString.size() > 9))
			{
				cerr << "E0"; 
				exit(1);
			}

			else if (enteredString.size() < numberDigit) //The situation where the number of digits for the input is less
			{
				cerr << "E1";
				exit(1);
			}

			else if (!checkForCharacter(enteredString)) //The situation where the input include any character other than [0-9]
			{
				cerr << "E2";
				exit(1);
			}

			else //If the input is not incorrect, we evaluate the response in this block.
			{
				if (checkForAnswer(enteredString,secretNumber,count))
				{
					cout << "FOUND " << 100 - claim << endl;
					exit(1);
 				}

				else
				{
					cout << count[0] << " " << count[1] << endl;
					count[0] = 0;
					count[1] = 0; //Since Array elements behave statically, we reset them before sending them back to the function.
				}
			}

			if (claim == 0)
			{
				cout << "FAILED" << endl;
				exit(1);
			}
		}
		while (true);
	}
	return 0;
}	